프로젝트를 만들 때 Admin Page => 본 적 없다.

@JSONFormat
@JsonIgnore => 패스워드는 json으로 빼주라.
=> json 비밀번호 처리

findByid로 아이디를 찾을 것이냐, queryMethod를 이용하여 아이디나 비밀번호를 찾을 것이냐?

runtimeException으로 잡은 이유는?

패스워드 틀린 값을 주면 500 에러가 발생한다.

사용자 아이디, 비밀번호 오류는 200으로 잡아낸다.

리덕스 thunk, redux saga


pending, fulfilled, rejected
비동기 작업에는 4가지 상태가 있다.

createdAsink => 펜딩, 풀필, 리젝트 상태가 존재하게 한다.

loginSlice 작업

로그인 상태를 알아야 된다. => Action에서 들어온 값을 확인해야 한다.
reducer는 순수한 함수이기에 return이 있어야 된다.

action.payload => 로그인한 사용자 정보

payload 안에 이메일, 닉네임, admin여부, pw 존재

const [email, nickname, admin] = action.payload
stat.email = email
state.nickname = nickname
state.admin = admin

로딩은 성공했고 다시 false로 변경되었다.

CreateAsync Thunk() 함수의 결과는 객체가 등장한다. 이 객체에 속성이 붙는다. 풀필드, 펜딩, 리젝트드
함수의 매개변수의 함수는 비동기 호출이다. promise호출, 파라미터가 있다면 람다식이다.

슬라이스 => extrareducer => 빌더를 이용해서 비동기 Thunk 경우의 수 처리를 한다.

우리는 API SERVER이다. 

local 8080, local 3000 쿠키 전달은 불가능하다. 토큰을 활용해야 한다.
로그인을 하면 이메일, 비밀번호, 닉네임 + 토큰를 준다.

로그인이 되자마자 상태가 change => 과거 장바구니 데이터를 준다.
최근 본 상품은 status를 저장해야 한다.

비동기 처리로 => 이득을 봐야된다.

상품데이터 자체를 놓으면 프로그램이 무거워진다.

그룹바이하고 카운트를 세주면 된다.

상품 추가하려면 이메일을 추가해야하는데 없다.

커스텀 훅스를 사용하는 이유 => 로직 재사용을 위해서

ReadComponent 적용

이메일 값과 해당 상품의 번호만 확인을 해보자.

버튼을 누르면 dispatch를 할 것이다.

addCountThunk

서버 작업을 하고 프론트엔드
카드에 몇 개 있는지 알려준다.

newPromise























