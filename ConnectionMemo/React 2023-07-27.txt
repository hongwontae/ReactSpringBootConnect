useEffect
=> 컴포넌트가 렌더링 될 떄마다 특정 작업을 실행할 수 있게 해주는 Hook

useEffect 기본형태
useEffect(function, deps)
function : 수행하고자하는 작업
deps : 배열 형태이며, 배열 안에는 검사하고자 하는 특정 값, 빈 배열


컴포넌트가 화면에 처음 렌더링 될 떄만 실행하고 싶을 때는 deps위치에 빈 배열을 주면 된다.
배열을 생략하면 리렌더링 될 때마다 실행된다.

특정값이 업데이트 될 때 실행하고 싶을 때는 deps 위치의 배열 안에 검사하고 싶은 값을 넣어준다.

언마운트 될 때만 cleanUp 함수를 실행하고 싶을 때 두 번째 파라미터로 빈 배열을 넣는다.
특정 값이 업데이트 되기 직전에 cleanUp 함수를 실행하고 싶을 때 deps 배열 안에 검사하고 싶은 값을 넣어준다.

=> useEffect 안에 사용하는 상태나 props가 있다면 deps에 넣어주는 것이 규칙이다.


useState
State란 컴포넌트가 가질 수 있는 상태를 뜻한다.
const [state, setState] = useState(초기값);
=> 이 초기값에 배열이나 객체가 들어갈 수 있다. ex) let state = [1,2,3]  or {k:1, t:3}
state에 데이터를 저장한다. => 저장된 state값 html {데이터 바인딩}
변동 사항이 생기면 state를 쓰는 html도 자동으로 재 랜더링된다.
state => 현재 상태값은 state라는 변수에 있다. (변수명이라고 생각해도 좋다.)
setState => state를 변경하고 싶을 경우 setState() 호출하면 된다.
setState를 사용하면 state(상태값)이 변경되는데 이 때 자동으로 리 렌더링되어 화면에 적용되는 로직

setState내의 함수에서 콜백함수를 사용해도 된다.
1. 콜백함수의 인자는 이전 상태값을 가지게 된다.
2. 콜백함수의 return 값에는 새로운 state를 지정할 수 있다.

배열이나 객체를 업데이트 할때는 기존 배열/객체를 직접 수정하면 안되고, 새로운 객체를 만들어서 변화를 주어야 한다. 
=> setState를 사용했을 때 기존 state와 신규 state 값이 같을 때는 값이 변경 안된다.

그래서 spread 문법을 사용한다.
Spead 문법은 배열, 문자열, 객체의 괄호를 벗기는 역할을 한다.
주로 원본은 남기고 복사하기를 원할 때 사용한다.
=> 이러한 행위가 state의 불변성을 지킨다. => 기존 state와 신규 state를 false하게 쉽게 한다.


map function
=> 파라미터로 전달된 함수를 사용하여 배열 내 각 요소를 원하는 규칙에 따라 변환한 후 새로운 배열을 생성한다.
모든 배열에는 map()함수가 내장되어 있다.
map은 인자로 콜백함수가 들어와야 한다.

map함수를 구현할 때 key가 없으면 오류 메시지가 발생한다.
=>   만약 key가 설정되지 않았다면 가상 DOM을 순차적으로 비교하면서 감지하기 때문에 key가 없을때보다 속도가 느리다.
key값을 컴포넌트 속성에 주면 된다. => 고유한 값이면 더욱 좋다.







★★ 리액트 생명주기 ★★
리액트는 생명주기가 존재한다. will붙은 함수는 작업을 처리하기 전에 호출되는 함수, did 붙은 함수는 어떤작업을 처리한 후에 호출되는 함수이다. 라이프 사이클은 크게 Mount, Update, UnMount 3가지로 분리된다.
Mount는 DOM 객체가 생성되고 브라우저에 나타나는 것을 의미한다.


★★ 배열 구조 분해 ★★

이름과 성을 요소로 가진 배열
let arr = ["Bora", "Lee"]

구조 분해 할당을 이용해 firstName엔 arr[0]을 surname엔 arr[1]을 할당하였습니다.
let [firstName, surname] = arr;

이렇게 사용이 가능해진다.
alert(firstName); // Bora
alert(surname);  // Lee

★★ 자바스크립트 비동기 ★★
특정 코드의 연산이 끝날 때까지 코드의 실행을 멈추지 않고 다음 코드를 먼저 실행하는 js 특성
ex) setTimeOut =>
1. hello, 2. sto(3) say, 3. hhhe 
hello가 나오고 hhhe가 나오고 그 다음 say가 나온다. => 비동기 처리

Promise
비동기 처리에 사용되는 객체이다. 프로미스는 주로 서버에서 받아온 데이터를 화면에 표시할 때 사용한다.
웬만하면 비동기처리를 막는 식으로 사용한다.

Promise의 상태
Pending(대기)	비동기 로직 처리의 미완료 상태
Fulfilled(이행)	비동기 로직 처리가 완료된 상태로 Promise 결과값 반환 상태
Rejected(실패)	비동기 로적 처리의 실패 또는 오류 상태

if api를 요청하여 데이터를 가져오는데 망상해서 미리 띄우면 오류나 빈화면이 발생한다.
=> 이 문제점을 해결하기 위한 방법이 Promise

promise 상태는 프로미스의 처리 과정을 의미한다.
new Promise()로 프로미스를 생성하고 종료될 때까지 3가지 상태를 갖는다.
new Promise(); => 메서드를 호출하면 대기(Pending) 상태가 된다.

new Promise(function(resolve, reject)=>{
....
}) => 메서드를 호출할 때는 콜백함수를 선언할 수 있고 콜백 함수 인자는 resolve, reject이다.


await
=> async 함수내에서만 사용 가능하다. await를 만나게 되면 promise가 처리될 때까지 대기한다.
await 사용하면 콜백함수 처리 없이 비동기 처리간,ㅇ.




axios => 요청 취소 및 요청과 응답을 JSON 형태로 자동 변경
Axios는 HTTP Methods가 존재하며 이는 클라이언트가 웹서버에게 사용자 요청의 목적/종류를 알리는 수단이다.

문법
1. get
axios.get(url,[,config])
=> 정보를 전달하는 것이지 값이나 상태 change 불가

2. post
axios.post("url주소",{
  data객체
    },[,config])
=> data 객체는 boot로 보낼 데이터를 설정한 객체를 보낸다.


.then() => 통신 성공시 실행되는 함수
.catch() => 실패했을 때 실행되는 함수
data => axios 통신 시 보낼 데이터
headers => 데이터 형식 정의
then((res)=>{}) => 성공 시
catch((err)=>{}) => 실패시


그냥 async를 사용하면 async 함수 내부에 await를 사용할 수 있는데 이렇게 하면 Promise가 끝날 떄까지 결과 값을 특정 변수에 담을 수 있다.
















