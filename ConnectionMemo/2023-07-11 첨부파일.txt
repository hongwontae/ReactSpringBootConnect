DB설정은 자기 마음이다.

모든 작업이 pk를 통해서만 이루어진다. manyToOne, OneToMany가 그렇다.

OneToMany 
=> 상품에 이미지, 독립적인 상황에서 벌어지는 상황은 OneToMany가 아니다.
=> 팀을 만들 떄 회원을 만들어서 넣는 판단이 중요하다.
=> oneTOmany는 테이블이 3개가 만들어진다. 

bbq 본사에서는 메뉴관리를 한다.
지점에 따라 메뉴가 팔수도 있고 아닐 수도 있다. => 지점이 독립적이다.
=> oneTomany이다. => 원래 이런 의미이다.
가게 지점 관리 직원/ 메뉴 관리 직원 => 따로 있는 것이다.

ElementCollection
pk가 없다. => crud가 불가능하다. => 독립적일 수가 없다.
회원이 USER,ADMIN,MANAGE 권한이 있다. 회원 정보의 일부이다. => ElemnetCollection

인베디드 => 아예 종속적인 것
게시판-파일을 한묶음 => elementCollection이다.


데이터베이스에는 파일 이름만 들어가야 한다.
이미지 넣으면 속도가 절대 안나온다.

oneTomany 하나의 테이블이 여러개를 테이블을 물고 있다.
ManytoOne => db관점으로 본다.

포트폴리오 DB설계는 sqlWorkBench로 ERD만든다.

대다다가 원투매니랑 같은 설계이다.

원투매니를 할때 의존관계 형성할 떄 new ArrayList로 만들까?
주인공은 FileBoard이다. 
도메인 주도 개발에서는 엔티티가 비지니스 로직을 가진다.


PersistentContext => 영속공간, 엔티티매니저가 있다.
repos.save => 파일보드를 추가하면 엔티티매니저가 엔티티객체에서 파일보드를 저장한다.
관리해야 하는 객체가 하나더 있다. 그게 바로 list다.

주소값이 다르기 때문에 new ArrayList로 만든다. 고정값을 가지게 만드는 것이다.
new 컬렉션을 만들면 쉽게 건들수 없어서 new로 만든다.

파일보드를 저장하면 파일 이미지도 저장이 된다.

insert가 아니라 Update가 되었다.
=> ?? why 관리의 주체가 파일 보드이다. (Test Insert)

list일 때 조회할 떄는 도와주지 않는다.

fetchType은 lazy가 기본이다.

fetch => 일괄처리
fetchsize => 몇개가까지 일괄처리해달라

판단을 해야한다.
image 하나만/ image 여러개?

Qdsl를 통해서 limit를 날린다. 근데 제한을 하지 못한다.

entiti
controller
react
3개를 통해 첨부파일의 로직을 짠다.

OneToMany => limit가 제일 관건이다. 안걸리면 query가 많이 날라가서 성능이 떨어진다.


n문제
모든 리스트는 qdsl로 동적 처리 가능하게 만들어야 하고 limit가 걸리게 만들어야 하고 대표이미지를 가져와야 한다.

쿼리dsl랑 베치사이즈랑 합쳐서 목록사이즈를 만들어 낼 수 있다.
좋은 방법은 아니다.
사실상 조인을 하지 않고 betchSize에 의존한다.
그냥 보드만 가지고 오고 배치사이즈를 이용해서 가져온다.

DB상으로는 FK가 되어 있긴 하다.
단방향 참조에서는 outer join에 on조건이 불가능하다.

orphanRemoval = true
=> 이건 양방향에서 의미가 있다.
=> 부모 엔티티에서 자식 엔티티를 떨궜다. 연결이 안된것들을 삭제한다.

cascade.REMOVE => 이미지가 엔티티다. 단독으로 crud가 가능하다.
도메인 주도 개발을 한다. => 근데 일대다 관계에서 

JPA 객체와 DB의 일치가 제일 중요하다.

첨부파일은 수정과 삭제만 하면 된다.

회원-회원의 주소가 여러개/ 회원 수정할 떄 주소를 수정한다.

useRef


목록데이터를 뽑았는데 댓글도 나오게 만들어라.

Document.GETBYid => useref













